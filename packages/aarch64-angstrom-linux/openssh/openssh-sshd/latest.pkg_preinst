#!/bin/sh\nbbnote () {\n\techo "NOTE: $*"\n}\nbbwarn () {\n\techo "WARNING: $*"\n}\nbbfatal () {\n\techo "ERROR: $*"\n\texit 1\n}\nperform_groupadd () {\n\tlocal rootdir="$1"\n\tlocal opts="$2"\n\tbbnote "openssh: Performing groupadd with [$opts]"\n\tlocal groupname=`echo "$opts" | awk '{ print $NF }'`\n\tlocal group_exists="`grep "^$groupname:" $rootdir/etc/group || true`"\n\tif test "x$group_exists" = "x"; then\n\t\teval flock -x $rootdir/etc -c \\"$PSEUDO groupadd \\$opts\\" || true\n\t\tgroup_exists="`grep "^$groupname:" $rootdir/etc/group || true`"\n\t\tif test "x$group_exists" = "x"; then\n\t\t\tbbfatal "openssh: groupadd command did not succeed."\n\t\tfi\n\telse\n\t\tbbnote "openssh: group $groupname already exists, not re-creating it"\n\tfi\n}\nperform_useradd () {\n\tlocal rootdir="$1"\n\tlocal opts="$2"\n\tbbnote "openssh: Performing useradd with [$opts]"\n\tlocal username=`echo "$opts" | awk '{ print $NF }'`\n\tlocal user_exists="`grep "^$username:" $rootdir/etc/passwd || true`"\n\tif test "x$user_exists" = "x"; then\n\t\teval flock -x $rootdir/etc -c  \\"$PSEUDO useradd \\$opts\\" || true\n\t\tuser_exists="`grep "^$username:" $rootdir/etc/passwd || true`"\n\t\tif test "x$user_exists" = "x"; then\n\t\t\tbbfatal "openssh: useradd command did not succeed."\n\t\tfi\n\telse\n\t\tbbnote "openssh: user $username already exists, not re-creating it"\n\tfi\n}\nperform_groupmems () {\n\tlocal rootdir="$1"\n\tlocal opts="$2"\n\tbbnote "openssh: Performing groupmems with [$opts]"\n\tlocal groupname=`echo "$opts" | awk '{ for (i = 1; i < NF; i++) if ($i == "-g" || $i == "--group") print $(i+1) }'`\n\tlocal username=`echo "$opts" | awk '{ for (i = 1; i < NF; i++) if ($i == "-a" || $i == "--add") print $(i+1) }'`\n\tbbnote "openssh: Running groupmems command with group $groupname and user $username"\n\tlocal mem_exists="`grep "^$groupname:[^:]*:[^:]*:\\([^,]*,\\)*$username\\(,[^,]*\\)*" $rootdir/etc/group || true`"\n\tif test "x$mem_exists" = "x"; then\n\t\teval flock -x $rootdir/etc -c \\"$PSEUDO groupmems \\$opts\\" || true\n\t\tmem_exists="`grep "^$groupname:[^:]*:[^:]*:\\([^,]*,\\)*$username\\(,[^,]*\\)*" $rootdir/etc/group || true`"\n\t\tif test "x$mem_exists" = "x"; then\n\t\t\tbbfatal "openssh: groupmems command did not succeed."\n\t\tfi\n\telse\n\t\tbbnote "openssh: group $groupname already contains $username, not re-adding it"\n\tfi\n}\nOPT=""\nSYSROOT=""\n\nif test "x$D" != "x"; then\n\t# Installing into a sysroot\n\tSYSROOT="$D"\n\tOPT="--root $D"\n\n\t# Make sure login.defs is there, this is to make debian package backend work\n\t# correctly while doing rootfs.\n\t# The problem here is that if /etc/login.defs is treated as a config file for\n\t# shadow package, then while performing preinsts for packages that depend on\n\t# shadow, there might only be /etc/login.def.dpkg-new there in root filesystem.\n\tif [ ! -e $D/etc/login.defs -a -e $D/etc/login.defs.dpkg-new ]; then\n\t    cp $D/etc/login.defs.dpkg-new $D/etc/login.defs\n\tfi\n\n\t# user/group lookups should match useradd/groupadd --root\n\texport PSEUDO_PASSWD="$SYSROOT"\nfi\n\n# If we're not doing a special SSTATE/SYSROOT install\n# then set the values, otherwise use the environment\nif test "x$UA_SYSROOT" = "x"; then\n\t# Installing onto a target\n\t# Add groups and users defined only for this package\n\tGROUPADD_PARAM="${GROUPADD_PARAM}"\n\tUSERADD_PARAM="${USERADD_PARAM}"\n\tGROUPMEMS_PARAM="${GROUPMEMS_PARAM}"\nfi\n\n# Perform group additions first, since user additions may depend\n# on these groups existing\nif test "x`echo $GROUPADD_PARAM | tr -d '[:space:]'`" != "x"; then\n\techo "Running groupadd commands..."\n\t# Invoke multiple instances of groupadd for parameter lists\n\t# separated by ';'\n\topts=`echo "$GROUPADD_PARAM" | cut -d ';' -f 1 | sed -e 's#[ \\t]*$##'`\n\tremaining=`echo "$GROUPADD_PARAM" | cut -d ';' -f 2- | sed -e 's#[ \\t]*$##'`\n\twhile test "x$opts" != "x"; do\n\t\tperform_groupadd "$SYSROOT" "$OPT $opts"\n\t\tif test "x$opts" = "x$remaining"; then\n\t\t\tbreak\n\t\tfi\n\t\topts=`echo "$remaining" | cut -d ';' -f 1 | sed -e 's#[ \\t]*$##'`\n\t\tremaining=`echo "$remaining" | cut -d ';' -f 2- | sed -e 's#[ \\t]*$##'`\n\tdone\nfi\n\nif test "x`echo $USERADD_PARAM | tr -d '[:space:]'`" != "x"; then\n\techo "Running useradd commands..."\n\t# Invoke multiple instances of useradd for parameter lists\n\t# separated by ';'\n\topts=`echo "$USERADD_PARAM" | cut -d ';' -f 1 | sed -e 's#[ \\t]*$##'`\n\tremaining=`echo "$USERADD_PARAM" | cut -d ';' -f 2- | sed -e 's#[ \\t]*$##'`\n\twhile test "x$opts" != "x"; do\n\t\tperform_useradd "$SYSROOT" "$OPT $opts"\n\t\tif test "x$opts" = "x$remaining"; then\n\t\t\tbreak\n\t\tfi\n\t\topts=`echo "$remaining" | cut -d ';' -f 1 | sed -e 's#[ \\t]*$##'`\n\t\tremaining=`echo "$remaining" | cut -d ';' -f 2- | sed -e 's#[ \\t]*$##'`\n\tdone\nfi\n\nif test "x`echo $GROUPMEMS_PARAM | tr -d '[:space:]'`" != "x"; then\n\techo "Running groupmems commands..."\n\t# Invoke multiple instances of groupmems for parameter lists\n\t# separated by ';'\n\topts=`echo "$GROUPMEMS_PARAM" | cut -d ';' -f 1 | sed -e 's#[ \\t]*$##'`\n\tremaining=`echo "$GROUPMEMS_PARAM" | cut -d ';' -f 2- | sed -e 's#[ \\t]*$##'`\n\twhile test "x$opts" != "x"; do\n\t\tperform_groupmems "$SYSROOT" "$OPT $opts"\n\t\tif test "x$opts" = "x$remaining"; then\n\t\t\tbreak\n\t\tfi\n\t\topts=`echo "$remaining" | cut -d ';' -f 1 | sed -e 's#[ \\t]*$##'`\n\t\tremaining=`echo "$remaining" | cut -d ';' -f 2- | sed -e 's#[ \\t]*$##'`\n\tdone\nfi\n